.. _quickstart:

Quickstart
==========

Introduction
------------

To use pkr, you need to create environment files.
They will describe the containers you want to create, and also describe the
variables of your environment (see files and data organization).

An environment is a template of a deployment, providing a default set of
values for a specific kind of deployment ( such as a development, test).

An instance of this is a kard, which additionally contains values related to a
specific deployment (like passwords, etc.).

In this example, we are going to create an environment for a simple python web
application exposed through a Nginx server, run locally on docker and
run with docker and docker-compose.


Our first application pkr-ized
-------------------------------

Let's create files for our sample application.
They can be found in the sample/simple folder of the pkr repo.

::

    MyApp
    ├── app
    │   └── __main__.py
    ├── etc
    │   └── nginx.conf
    └── templates
        ├── dockerfiles
        │  nginx.dockerfile.template
        │   └── myApp.dockerfile.template
        └── compose
            └── docker-compose.yml.template


Choose location of your pkr project
-----------------------------------

pkr requires a specific file tree to work properly. It can be created anywhere,
but the recommended path is to use the root path of your project.

This path is referred as PKR_PATH.

Pkr provides an easy way to initialize its files and folder skeleton.

    pkr init $PKR_PATH

This will create a skeleton structure like the following:

::

    $PKR_PATH
    ├── env/
    │   └── dev/
    │       └── env.yml
    └── kard/

2 folders were created:

* | the `env` folder contains files to describe your environments. Every
  | environment is in a dedicated folder, and is described by the  `env.yaml`
  | file.

* | the `kard` folder contains the generated docker-context, and driver specific
  | files (see kard).


.. ATTENTION::
   For pkr to know which project to reference, the `pkr` command should be run
   in the project subtree.
   You can also refer to it by exporting PKR_PATH as an environment variable.


Create your first environment
-----------------------------

Now you need to create your first environment.

Open the env/dev/env.yml file.

::

    containers:
      app:
        dockerfile: myApp.dockerfile
        requires:
          app/:
            dst: app/
      nginx:
        dockerfile: nginx.dockerfile
        requires:
          etc/nginx.conf:
            dst: nginx/nginx.conf

    driver:
      docker_compose:
        compose_file: templates/compose/docker-compose.yml.template

In this file, we referenced our docker-related files. The containers section
contains the list of docker images that are going to be build by pkr. The
images are referenced by a name, and they have a single attribute, which points
to the dockerfile.

This path is relative to the docker-context generated by pkr. See in the make
step to understand how to setup their path.

The "requires" attributes specifies the files required in the docker-context,
that will be copied and, optionally, rendered if they are templates.

The driver section provides details to the drivers. Here, we provide the
docker-compose template.


Create your first kard
----------------------

Now that we have a first environment, we can create our first kard.
In pkr terminology, an environment instance is called a kard.

::

    pkr kard create -e dev -d compose dev-kard


.. WARNING::
   this command can require extra information, that will be asked
   interactively.
   They can also be provided beforehand using the --extra argument.

::

    pkr kard create -e dev -d compose dev-kard --extra tag=test


This command creates a kard instance, using the environment named "dev" and
the docker-compose driver. The kard will be named dev-kard.


Launch your kard
----------------

Now you can start your application !

::

    pkr up


pkr will build images, and start the containers.

You can now see the ip address of containers.

::

    pkr ps

Copy the IP address of the nginx container, and try to curl its http port.

::

    curl http://<the nginx ip>


Congratulations ! Your first stack is up !
